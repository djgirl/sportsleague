{"ast":null,"code":"import { DOMAIN_NAME } from './apiUrls';\nimport { showAlert, removeAlert, notify } from './notify';\nexport const fetch_get = (url, status = false, alert = false) => {\n  alert && showAlert('Please wait ...');\n  const ROOT_API = DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    alert && removeAlert();\n\n    if (response.status === 403) {\n      notify('You DO not access to this page', true);\n      return {};\n    }\n\n    if (response.status === 401) {\n      notify('You do not access to this page', true);\n      return {\n        'unauthorized': true\n      };\n    } else if (status) {\n      return response;\n    } else {\n      return response.json();\n    }\n  }).catch(error => {\n    notify('Server busy, Please try again.', true);\n  });\n};\nexport const fetch_post = (url, data, status = false, alert = false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API = DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token')\n    },\n    body: data\n  }).then(response => {\n    alert && removeAlert();\n\n    if (response.status === 403) {\n      notify('You DO not access to this page', true);\n      return {};\n    }\n\n    if (status) {\n      return response;\n    } else {\n      return response.json();\n    }\n  }).catch(error => {\n    notify('Server busy, Please try again.', true);\n  });\n};\nexport const fetch_post_download = (url, data, status = false, alert = false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API = DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token')\n    },\n    body: data\n  }).then(response => {\n    alert && removeAlert();\n    console.log(response, \"*********res\");\n\n    if (response.status === 403) {\n      notify('You DO not access to this page', true);\n      return {};\n    }\n\n    if (status) {\n      return response;\n    } else {\n      return response.blob();\n    }\n  }).catch(error => {\n    notify('Server busy, Please try again.', true);\n  });\n};\nexport const fetch_post_field = (url, data, status = false, alert = false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API = DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: data\n  }).then(response => {\n    alert && removeAlert();\n\n    if (response.status === 403) {\n      notify('You DO not access to this page', true);\n      return {};\n    }\n\n    if (status) {\n      return response;\n    } else {\n      return response.json();\n    }\n  }).catch(error => {\n    notify('Server busy, Please try again.', true);\n  });\n};\nexport const login_post = (url, data, status = false, alert = false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API = DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: data\n  }).then(response => {\n    alert && removeAlert();\n\n    if (response.status === 403) {\n      notify('You DO not access to this page', true);\n      return {};\n    }\n\n    if (status) {\n      return response;\n    } else {\n      return response.json();\n    }\n  }).catch(error => {\n    notify('Server busy, Please try again.', true);\n  });\n};","map":{"version":3,"sources":["/home/nikhila/Documents/projs/react/frontend/src/components/Fetch.js"],"names":["DOMAIN_NAME","showAlert","removeAlert","notify","fetch_get","url","status","alert","ROOT_API","fetch","method","headers","localStorage","getItem","then","response","json","catch","error","fetch_post","data","body","fetch_post_download","console","log","blob","fetch_post_field","login_post"],"mappings":"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","sourcesContent":["import { DOMAIN_NAME } from './apiUrls';\nimport { showAlert, removeAlert, notify } from './notify';\n\nexport const fetch_get = (url, status=false, alert=false) => {\n  alert && showAlert('Please wait ...');\n  const ROOT_API = DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    }\n  })\n  .then(response => {\n    alert && removeAlert();\n    if(response.status === 403) {\n      notify('You DO not access to this page', true)\n      return {}\n    }\n    if(response.status === 401) {\n      notify('You do not access to this page', true)\n      return {'unauthorized': true}\n    }\n    else if(status) {\n      return response\n    } else {\n      return response.json()\n    }\n  })\n  .catch((error) => {\n    notify('Server busy, Please try again.', true)\n  });\n}\n\nexport const fetch_post = (url, data, status=false, alert=false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API =DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token'),\n    },\n    body: data\n  })\n  .then(response => {\n    alert && removeAlert();\n    if(response.status === 403) {\n      notify('You DO not access to this page', true)\n      return {}\n    }\n    if(status) {\n      return response\n    } else {\n      return response.json()\n    }\n  })\n  .catch((error) => {\n    notify('Server busy, Please try again.', true)\n  });\n}\n\nexport const fetch_post_download = (url, data, status=false, alert=false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API =DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token'),\n    },\n    body: data\n  })\n  .then(response => {\n    alert && removeAlert();\n    console.log(response, \"*********res\")\n    if(response.status === 403) {\n      notify('You DO not access to this page', true)\n      return {}\n    }\n    if(status) {\n      return response\n    } else {\n      return response.blob()\n    }\n  })\n  .catch((error) => {\n    notify('Server busy, Please try again.', true)\n  });\n}\n\nexport const fetch_post_field = (url, data, status=false, alert=false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API =DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token ' + localStorage.getItem('token'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: data\n  })\n  .then(response => {\n    alert && removeAlert();\n    if(response.status === 403) {\n      notify('You DO not access to this page', true)\n      return {}\n    }\n    if(status) {\n      return response\n    } else {\n      return response.json()\n    }\n  })\n  .catch((error) => {\n    notify('Server busy, Please try again.', true)\n  });\n}\n\nexport const login_post = (url, data, status=false, alert=false) => {\n  alert && showAlert('Loading ...');\n  const ROOT_API =DOMAIN_NAME;\n  return fetch(ROOT_API + url, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: data\n  })\n  .then(response => {\n    alert && removeAlert();\n    if(response.status === 403) {\n      notify('You DO not access to this page', true)\n      return {}\n    }\n    if(status) {\n      return response\n    } else {\n      return response.json()\n    }\n  })\n  .catch((error) => {\n    notify('Server busy, Please try again.', true)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}